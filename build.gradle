buildscript {
  repositories {
    maven {
        name 'central'
        url 'https://maven.thorfusion.com/artifactory/central/'
    }
    }
    dependencies {
        classpath ('com.anatawa12.forge:ForgeGradle:1.2-1.0.+') {
            changing = true
        }
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:latest.release"
    }
}

plugins {
    id 'java-library'
}

apply plugin: 'forge'
apply plugin: 'idea'
apply plugin: 'java'
apply plugin: "com.jfrog.artifactory"
apply plugin: "maven-publish"
apply plugin: "maven"

repositories {
    maven {
        name 'central'
        url 'https://maven.thorfusion.com/artifactory/central/'
    }
}

// Define properties file
ext.configFile = file "build.properties"

configFile.withReader {
    // Load config. It shall from now be referenced as simply config or project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

dependencies {
    compile(group: 'ivorius.ivtoolkit', name: 'IvToolkit', version: '1.2.1', classifier: 'dev')
}

version = "${config.mod_version}"
def ENV = System.getenv()
if (ENV.DRONE_BUILD_NUMBER) {
    version += ".n" + ENV.DRONE_BUILD_NUMBER
}

group= "ivorius.reccomplex" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "RecurrentComplex"

minecraft {
    version = config.minecraft_version + "-" + config.forge_version
    replaceIn "ivorius/reccomplex/RecurrentComplex.java"
    replace "GRADLE_MODVERSION", config.mod_version
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8


task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
}

artifacts {
    archives sourceJar
    archives deobfJar
}

artifactory {
    contextUrl = System.getenv("MAVEN_URL")
    publish {
        repository {
            repoKey = 'thorfusion'
            username = System.getenv("MAVEN_USERNAME")
            password = System.getenv("MAVEN_PASSWORD")
            maven = true
        }
        defaults {
            publications('mavenJava')
        }
        publishBuildInfo = false
        publishArtifacts = true
        publishPom = true
    }
    resolve {
        repository {
            repoKey = 'central'
            username = System.getenv("MAVEN_USERNAME")
            password = System.getenv("MAVEN_PASSWORD")
            maven = true

        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId = rootProject.name
            groupId = project.group
            version = project.version
            artifacts = [sourceJar, deobfJar, jar]
            components.java.withVariantsFromConfiguration(configurations.runtimeElements) {
                skip()
            }
        }
    }
}

uploadArchives() {
    dependsOn reobf

    if (project.hasProperty("mavenUrl") && project.hasProperty("mavenUser") && project.hasProperty("mavenPassword")) {
        repositories {
            logger.info('Publishing to files server')

            mavenDeployer {

                repository(url: project."mavenUrl") {
                    authentication(userName: project."mavenUser", password: project."mavenPassword")
                }

                addFilter('deobf') {artifact, file ->
                    artifact.attributes['classifier'] == 'dev'
                }
                pom('deobf').version = project.version
                addFilter('sources') {artifact, file ->
                    artifact.attributes['classifier'] == 'sources'
                }
                pom('sources').version = project.version
                addFilter('universal') {artifact, file ->
                    artifact.attributes['classifier'] == null
                }
                pom('universal').version = project.version

                pom {
                    groupId = project.group
                    version = project.version
                    artifactId = project.archivesBaseName
                    project {
                        name project.archivesBaseName
                        packaging 'jar'
                        description 'Handles structures for the game Minecraft'
                        url 'https://github.com/Ivorforce/RecurrentComplex'

                        scm {
                            url 'scm:git:git@github.com:Ivorforce/RecurrentComplex.git'
                            connection 'scm:git:git@github.com:Ivorforce/RecurrentComplex.git'
                            developerConnection 'scm:git:git@github.com:Ivorforce/RecurrentComplex.git'
                        }

                        issueManagement {
                            system 'github'
                            url 'https://github.com/Ivorforce/RecurrentComplex/issues'
                        }

                        developers {
                            developer {
                                id 'Ivorius'
                                name 'Ivorius'
                                roles { role 'developer' }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        logger.log(LogLevel.ERROR, 'No upload variables defined!');
    }
}